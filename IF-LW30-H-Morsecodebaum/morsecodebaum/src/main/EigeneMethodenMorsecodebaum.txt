public void morseZeichenDecodieren(BinaryTree<String> b, String code){
        char[] elements = code.toCharArray();
        BinaryTree<String> current = b;
        for (int i = 0; i < elements.length; i++) {
            if (elements[i] == '.') {
                if (current.getLeftTree() != null) {
                    current = current.getLeftTree();
                }
                else {
                    System.out.println("Fehler, Morsecode gehört nicht zu einem Eintrag im Baum");
                    break;
                }
            }
            if (elements[i] == '-') {
                if (current.getRightTree() != null) {
                    current = current.getRightTree();    
                }
                else {
                    System.out.println("Fehler, Morsecode gehört nicht zu einem Eintrag im Baum");
                    break;
                }
            }
        }
        System.out.print(current.getContent());
    }

    public void morseZeichenDecodierenUnterricht(BinaryTree<String> b, String code) {
        if(code.length() == 0) {
            System.out.print(b.getContent());
        }
        else {
            if (code.charAt(0) == '.') {
                morseZeichenDecodierenUnterricht(b.getLeftTree(), code.substring(1));
            }
            else if (code.charAt(0) == '-') {
                morseZeichenDecodierenUnterricht(b.getRightTree(), code.substring(1));
            }
        }
    }
    public String morseZeichenDecodierenUnterrichtS(BinaryTree<String> b, String code) {
        if(code.length() == 0) {
            return(b.getContent());
        }
        else {
            if (code.charAt(0) == '.') {
                return morseZeichenDecodierenUnterrichtS(b.getLeftTree(), code.substring(1));
            }
            else if (code.charAt(0) == '-') {
                return morseZeichenDecodierenUnterrichtS(b.getRightTree(), code.substring(1));
            }
            
        }
        return "";
    }

    //HA zum 17.04.:
    //Morsecode für einen Buchstaben decodieren und zurückgeben
    public String decode(BinaryTree<String> b, String code){
        char[] elements = code.toCharArray();
        BinaryTree<String> current = b;
        for (int i = 0; i < elements.length; i++) {
            if (elements[i] == '.') {
                if (current.getLeftTree() != null) {
                    current = current.getLeftTree();
                }
                else {
                    System.out.println("Fehler, Morsecode gehört nicht zu einem Eintrag im Baum");
                    break;
                }
            }
            if (elements[i] == '-') {
                if (current.getRightTree() != null) {
                    current = current.getRightTree();    
                }
                else {
                    System.out.println("Fehler, Morsecode gehört nicht zu einem Eintrag im Baum");
                    break;
                }
            }
        }
        return current.getContent();
    }    
    
    //HA zum 17.04.:
    //Decodiert mehrere Buchstaben
    public String morseCodeDecodieren(String code){
        String[] letterCodes = code.split(" ");
        String[] result = new String[letterCodes.length]; 
        for (int i = 0; i < letterCodes.length; i++) {
            result[i] = morseZeichenDecodierenUnterrichtS(morsecodebaum, letterCodes[i]);
        }
        return result.toString();
    }